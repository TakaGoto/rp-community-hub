-- Table containing Ethereum wallets for Discord-logged-in users
create table public.profiles (
  id uuid references auth.users not null,
  eth text not null,

  primary key (id, eth)
);

alter table public.profiles enable row level security;

create policy "Only users can view their own profile."
  on profiles for select
  using ( auth.uid() = id );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- Basic role system for users (most notably moderators to create raffles)
create table role_types (
  id bigint generated by default as identity primary key,
  name text unique not null
);

alter table public.role_types enable row level security;

insert into role_types (name) values ('Moderator');

-- Each user can have potentially many roles
create table public.roles (
  user_id uuid references auth.users not null,
  role_id bigint references public.role_types not null,

  primary key (user_id, role_id)
);

alter table public.roles enable row level security;

create view moderators as select * from auth.users left join (
  select * from public.roles join public.role_types on public.roles.role_id = public.role_types.id
) as roles
on auth.users.id = roles.user_id
where roles.name = 'Moderator';

-- Raffles consist of name, image and description and can be managed by moderators
create table raffles (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text,
  image text,
  description text
);

alter table public.raffles enable row level security;

create policy "Raffles are viewable by everyone."
  on raffles for select
  using ( true );

create policy "Raffles can be inserted by moderators."
  on raffles for insert
  with check (exists(select * from moderators where user_id = auth.uid()));

create policy "Raffles can be updated by moderators."
  on raffles for update
  with check (exists(select * from moderators where user_id = auth.uid()));
